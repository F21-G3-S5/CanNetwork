@model CanNetwork.Models.SeekerRegistration

@{
    ViewBag.Title = "Seeker Registration";
}

<style>
    .stepwizard-row {
        display: flex;
        justify-content: space-around;
    }

    .stepwizard {
        display: block;
        width: 100%;
        background-color: #f9f9f9;
        border-radius: 3px;
        box-shadow: 0px 0px 2px 1px #eee;
        margin-bottom: 20px;
        padding-top: 15px;
        position: relative;
    }

    .stepwizard-row:before {
        top: 30%;
        bottom: 0;
        position: absolute;
        content: " ";
        width: 100%;
        height: 4px;
        background-color: #eee;
        z-index: 0;
    }

    .stepwizard-step {
        display: table-cell;
        text-align: center;
        position: relative;
    }

        .stepwizard-step p {
            font-weight: 500;
            color: #666;
            margin-top: 10px;
        }

    .btn-circle {
        width: 30px;
        height: 30px;
        text-align: center;
        padding: 6px 0;
        font-size: 12px;
        line-height: 1.4;
        border-radius: 15px;
    }
</style>

<h2 class="text-primary">Seeker Registration</h2>

@if (@ViewBag.Note != null)
{
    <div class="alert alert-danger">
        @ViewBag.Note
    </div>
}

@using (Html.BeginForm("SeekerRegister", "RegisterUser", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="stepwizard">
            <div class="stepwizard-row">
                <div class="stepwizard-step">
                    <a href="#step-1" type="button" class="btn btn-primary">1</a>
                    <p>Personal Info</p>
                </div>
                <div class="stepwizard-step">
                    <a href="#step-2" type="button" class="btn btn-light">2</a>
                    <p>Education Info</p>
                </div>
                <div class="stepwizard-step">
                    <a href="#step-3" type="button" class="btn btn-light">3</a>
                    <p>Previous Work Info</p>
                </div>
                <div class="stepwizard-step">
                    <a href="#step-4" type="button" class="btn btn-light">4</a>
                    <p>Current Work Info</p>
                </div>
            </div>
        </div>

        <div id="err-div" class="alert alert-danger" style="display: none;">
            <span id="err-msg"></span>
        </div>

        <div class="step" id="step-1">
            <h4 class="text-primary d-inline-block mb-3" style="border-bottom: 2px solid #417cf7">Personal Info</h4>
            <div>
                <div class="form-group">
                    <label class="form-control-label col-md-2">Personal Photo</label>
                    <div class="col-md-10">
                        <input type="file" name="seekerPhoto" id="imageInput" class="form-control" />
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.SearchOnJobTitle, "Search For Job Title", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.SearchOnJobTitle, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SearchOnJobTitle, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Gender, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.BirthDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.BirthDate, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CountryId, "Country", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("CountryId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CityId, "City", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.CityId, new SelectList(" "), "--Select City--", new { @class = "form-control", id = "CityId" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.NationalityId, "Nationality", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("NationalityId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.NationalityId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.SecurityQuestion, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.SecurityQuestion, new { htmlAttributes = new { @class = "form-control", id = "companyField" } })
                        @Html.ValidationMessageFor(model => model.SecurityQuestion, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <button type="button" class="nextBtn btn btn-primary" data-next="#step-2">Next</button>
                </div>
            </div>
        </div>

        <div class="step" id="step-2">
            <h4 class="text-primary d-inline-block mb-3" style="border-bottom: 2px solid #417cf7">Education Info</h4>
            <div>
                <div class="form-group">
                    @Html.LabelFor(model => model.GraduationDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <input type="date" name="GraduationDate" class="form-control" />
                        @Html.ValidationMessageFor(model => model.GraduationDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.LanguageId, "Language", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("LanguageId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.LanguageId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.UniversityId, "University", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("UniversityId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.UniversityId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.EducationLevelId, "Education Level", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("EducationLevelId", null, htmlAttributes: new { @class = "form-control" })

                        @Html.ValidationMessageFor(model => model.EducationLevelId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label class="control-label col-md-2">CV</label>
                    <div class="col-md-10">
                        <input type="file" name="seekerCv" id="cv" class="form-control" />
                    </div>
                </div>

            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <button type="button" class="nextBtn btn btn-primary" data-next="#step-3">Next</button>
                </div>
            </div>
        </div>

        <div class="step" id="step-3">
            <h4 class="text-primary d-inline-block mb-3" style="border-bottom: 2px solid #417cf7">Previous Work Info</h4>
            <div class="alert alert-warning">
                If You Don't have previous work write "none" in Company Name Input and [0] In Salary
            </div>
            <div>
                <div class="form-group">
                    @Html.LabelFor(model => model.CompanyName, "Company Name", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Salary, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Salary, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Salary, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Duration, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Duration, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Duration, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.JobTitleId, "Job Title", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("JobTitleId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.JobTitleId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.JobTypeId, "Job Type", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("JobTypeId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.JobTypeId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.JobCategoryId, "Job Field", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("JobCategoryId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.JobCategoryId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <button type="button" class="nextBtn btn btn-primary" data-next="#step-4">Next</button>
                    </div>
                </div>

            </div>
        </div>

        <div class="step" id="step-4">
            <h4 class="text-primary d-inline-block mb-3" style="border-bottom: 2px solid #417cf7">Current Work Info</h4>
            <div class="alert alert-warning">
                If You Don't have Current work write "none" in Company Name Input and [0] In Salary
            </div>
            <div>
                <div class="form-group">
                    @Html.LabelFor(model => model.CurrentCompanyName, "Company Name", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CurrentCompanyName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CurrentCompanyName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CurrentSalary, "Salary", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CurrentSalary, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CurrentSalary, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CurrentDuration, "Duration", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CurrentDuration, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CurrentDuration, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CurrentJobTitle, "Job Title", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CurrentJobTitle, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CurrentJobTitle, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CurrentJobType, "Job Type", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CurrentJobType, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CurrentJobType, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CurrentJobCategory, "Job Field", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CurrentJobCategory, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CurrentJobCategory, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Register" id="registerBtn" class="btn btn-success" />
                    </div>
                </div>
            </div>
        </div>

    </div>
}

<hr />

<div>
    @Html.ActionLink("Back to Home", "Index", "Home", null, new { @class = "btn btn-dark" })
</div>


@section Scripts {
    <script>
        $(() => {

           $("#CountryId").change(() => {
                $.get("/Job/GetCitiesInCountry", { CountryId: $("#CountryId").val() }, (data) => {
                    $("#CityId").empty();
                    $.each(data, (index, row) => {
                        $("#CityId").append("<option value='" + row.Id +"'>"+row.CityName+"</option>")
                    });
                });
            });
 
            var navListItems = $('.stepwizard-step a'),
                [...allWells] = $('.step'),
                allNextBtn = $('.nextBtn');

            allWells.forEach(e => {
                $(e).hide();
            });

            $(allWells[0]).show();

            navListItems.click(function (e) {
                e.preventDefault();

                var target = $($(this)).attr('href'),
                    item = $(this);

                [...navListItems].forEach(n => {
                    $(n).removeClass("btn-primary");
                    $(n).addClass("btn-light");
                })

                $(item).removeClass("btn-light");
                $(item).addClass("btn-primary");

                $(allWells).hide();
                $(target).show();

            });

            [...allNextBtn].forEach(nextBtn => {
                $(nextBtn).click(() => {
                    var nextTarget = $(nextBtn).data("next");

                    [...navListItems].forEach(n => {
                        if ($(n).attr('href') == nextTarget) {

                            [...navListItems].forEach(b => {
                                $(b).removeClass("btn-primary");
                                $(n).addClass("btn-light");
                            })

                            $(n).removeClass("btn-light");
                            $(n).addClass("btn-primary");
                        }
                    })

                    allWells.forEach(e => {
                        $(e).hide();
                    })
                    $(nextTarget).show();

                    $('html,body').animate({
                        scrollTop: 0,
                    }, 'slow');
                })
            })
            /*
            $("#registerBtn").click(() => {

                if ($("#imageInput").val() != "") {
                    // Check image extetion
                    var imgValue = document.getElementById('imageInput').value,
                        imgExtention = imgValue.substr(imgValue.lastIndexOf(".") + 1),
                        validExtentions = ['png', 'jpg', 'gif'];
                    if ($.inArray(imgExtention, validExtentions) == -1) {
                        $("#err-div").fadeIn();
                        $("#err-msg").empty();
                        $("#err-msg").append("Please Choose Valid Image Extention ")
                        return false;
                    }

                    // Check image Size
                    var imgSize = document.getElementById('imageInput').files[0].size / 1024 / 1024;

                    if (imgSize > 2) {
                        $("#err-div").fadeIn();
                        $("#err-msg").empty();
                        $("#err-msg").append("Please Choose Image size < 2mb ")
                        return false;
                    }
                } else {
                    return true;
                }
            });*/
        });
    </script>
@Scripts.Render("~/bundles/jqueryval")
}
