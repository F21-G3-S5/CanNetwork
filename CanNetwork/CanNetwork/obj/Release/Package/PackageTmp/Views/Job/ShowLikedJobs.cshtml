@model IEnumerable<CanNetwork.Models.LikedJobs>
@using CanNetwork.Models
@using CanNetwork.Context
@using GridMvc.Html

@{
    MyDbContext db = new MyDbContext();
    ViewBag.Title = "Show Liked Jobs";
}

<h2 class="text-primary mb-3">Interested Jobs [@Model.Count()]</h2>

<hr />

@if (Model.Count() == 0)
{
    <div class="alert alert-danger">
        No Liked Jobs Yet!
    </div>
}
else
{
    @helper CustomRenderingOfColumnJobType(LikedJobs likedJobs)
    {
        if (likedJobs.Job.JobState == true)
        {
            <b class="text-success">Open</b>
        }
        else
        {
            <b class="text-danger">Close</b>
        }
    }

    @helper CustomRenderingOfColumn(LikedJobs likedJobs)
    {
        if (Session["SeekerUser"] != null)
        {
            @Html.ActionLink("Details", "Details", new { id = likedJobs.JobId }, new { @class = "btn btn-primary" })
            <button class="btn btn-danger deleteBtn" data-id="@likedJobs.Id">Delete</button>
        }
        else
        {
            @Html.ActionLink("Details", "Details", new { id = likedJobs.JobId }, new { @class = "btn btn-primary" })
        }
    }

    <div style="width: 100%">
        @Html.Grid(Model).Columns(columns =>
       {
           columns.Add(c => c.Job.JobTitle)
           .Titled("Job Title")
           .Filterable(true)
           .Sortable(true);

           columns.Add(c => c.Job.JobCategory.JobCategoryName)
           .Titled("Job Category")
           .Filterable(true)
           .Sortable(true);

           columns.Add(c => c.Job.JobType.JobTypeName)
           .Titled("Job Type")
           .Filterable(true)
           .Sortable(true);

           columns.Add()
            .Titled("Num.of Applicants")
            .Encoded(false)
            .Sanitized(false)
            .RenderValueAs(o => @<b class="d-block text-center">[@db.ApplyedJobs.Where(aj => aj.JobId == o.JobId).Count()]</b>)
            .Sortable(false)
            .Filterable(false);

            columns.Add()
            .Titled("Job State")
            .Encoded(false)
            .Sanitized(false)
            .RenderValueAs(o => CustomRenderingOfColumnJobType(o))
            .Sortable(true)
            .Filterable(true);

            columns.Add()
            .Titled("Actions")
            .Encoded(false)
            .Sanitized(false)
            .RenderValueAs(o => CustomRenderingOfColumn(o))
            .Sortable(true)
            .Filterable(true);

        }).WithPaging(4).Sortable(true)
    </div>
}

<hr />

<p>
    @Html.ActionLink("Back", "Index", "Home", null, new { @class = "btn btn-dark" })
</p>

<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
@section scripts{
    <script>
        $(() => {
            allDeleteBtns = $(".deleteBtn");
            [...allDeleteBtns].forEach(btn => {
                $(btn).click(() => {
                    id = $(btn).data("id");
                    $.ajax({
                        type: "Get",
                        url: "/Job/DeleteLikedJob/" + id,
                        success: res => {
                            if (res.result == 1) {
                                swal({
                                    title: "Delete Liked Job!",
                                    text: "You Deleted the Liked Job Successfully!",
                                    icon: "success",
                                    button: null,
                                });
                                setTimeout(() => {
                                    location.reload();
                                }, 3000);
                            } else {
                                swal({
                                    title: "Delete Liked Job!",
                                    text: "Delete the Liked Job Failer!",
                                    icon: "error",
                                    button: null,
                                });
                            }
                        },
                    });
                });
            });
        });
    </script>
}